/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 26.03.2025 16:11:45

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 8
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 41632;
#else
constexpr int kTensorArenaSize = 40608;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,3960 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0033088235650211573, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4] = { 1, 99, 40, 1, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[2] = { -1, 4000, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data3[2] = { -6077, 6077, };
const TfArray<1, int> tensor_dimension3 = { 1, { 2 } };
const TfArray<1, float> quant3_scale = { 1, { 2.8474260034272447e-05, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data4[2*4000] = { 
  -28, 3, 11, -6, 14, -41, -6, 4, -7, 7, 4, -2, -33, -22, -18, 9, 29, -49, -2, 36, 32, 26, 32, 1, 0, 31, 19, -34, 57, 51, -3, 6, 26, 58, 40, 16, 41, 9, 52, 36, 29, 74, 36, 1, 40, 56, 65, 34, 50, 48, 24, -6, 18, -16, 26, 29, 6, 37, 33, 73, -10, 4, 27, 43, -7, -26, 5, 3, 0, 9, 7, 15, 10, 33, 27, 33, 14, 16, -8, -2, -17, -5, 11, -16, -4, -26, -1, 0, 4, -29, -26, -69, 4, -13, 12, 9, 59, 57, 30, -17, -8, 3, -17, 21, 13, -13, -31, 94, -26, -23, 12, -25, -3, 0, -11, 4, 24, 6, 8, -16, -14, -9, 2, -20, 36, 1, 3, 1, 24, 5, -11, -1, -30, -8, 3, 13, 9, 4, 19, -11, -10, 7, 1, -15, 20, 10, 3, 4, -24, -2, -18, 22, 0, -48, 6, -21, 18, 20, 27, -23, -43, -7, -11, 1, 26, -13, -7, 13, 27, 19, 21, 8, 6, 4, 1, -19, 31, -39, 4, 42, 87, 36, 85, 12, 12, 45, 15, -44, 50, 38, -29, 6, 15, 48, 60, 33, 56, 34, 28, 27, 40, 82, 58, -7, 40, 32, 16, 71, 55, 57, 31, 28, 42, 19, 16, 21, 17, 44, 15, 127, -2, 11, 44, 23, -9, 14, 25, 2, -2, -2, -1, 10, 5, 9, 20, 23, -1, 18, -29, 29, -71, -3, 0, -5, -6, -2, -7, -6, 12, 1, -11, -106, -7, -17, 6, 14, 31, 49, 13, -19, -14, 20, -12, 0, 8, -5, 24, 49, -3, -5, 9, -7, -56, 3, 23, 16, 19, 18, 24, -5, -2, -5, -21, -2, 15, 27, -5, -5, 19, -28, -7, -10, -28, 2, -20, 2, 0, -12, 23, 8, -23, -18, -23, 0, -1, 25, 7, -1, 10, -6, 0, -1, 11, -12, -18, 13, 3, 33, 23, -6, -56, -18, 1, -1, 26, 0, 36, 13, 19, 21, 4, -8, -20, -28, -8, 1, 0, -44, 6, 26, 44, 17, -15, 1, 7, 16, 1, -50, 14, 45, -30, -9, 8, 33, 36, 2, 5, 23, 8, 21, 18, 45, 45, -28, -1, 15, 56, 19, -1, 43, -2, 12, 34, 13, -2, -6, 18, 41, 8, -4, 16, 17, -3, -5, 37, -6, -8, 15, 16, -2, 3, 17, 4, 12, 22, 59, 5, 16, -21, -11, -74, 16, 22, -29, -56, 6, -18, 7, -3, -29, 5, -111, -35, -8, 30, 14, 39, -1, 1, -12, -33, -3, -10, -5, 11, 3, 1, 94, 2, -19, -3, 0, -50, -8, -23, 4, 2, -3, -20, -16, 1, 2, -21, -4, -1, -9, -13, 6, -10, -7, 0, -8, -14, 13, -10, -10, -10, -19, 9, -7, -20, -30, -42, -27, -8, 15, 10, -4, -11, 5, 2, 1, -16, -4, 9, -29, -4, 4, 34, 31, -17, -2, -13, 7, 16, -1, -3, -10, 16, 22, -3, -16, -9, -8, 12, 7, 29, -22, -8, 8, 21, 1, 54, 20, 5, 12, 12, -15, 11, 29, 11, 34, 47, 57, 43, 32, 36, 31, 2, 21, 20, 20, 30, 28, 20, 14, 20, 33, -16, 65, 41, 11, 51, 10, 17, 28, 37, 8, 26, 5, 9, 25, 14, 0, 70, -40, 0, 19, 47, 30, 24, 5, 6, 59, 37, 115, 52, 42, -36, 7, -63, 37, 33, 0, -27, -9, -27, 2, 8, -9, 3, -103, -34, -15, 25, 38, 58, -18, 1, -15, -35, -4, -35, -11, -20, -9, -7, 85, -27, -26, -1, 6, -26, 6, 0, -13, 10, 14, 29, -15, -13, 1, -41, 21, -7, -2, 31, 4, 44, -41, -20, -11, -6, -32, -8, -4, -16, -15, 4, 9, -11, 14, -18, -19, 23, -5, -18, 0, 34, 6, 0, -20, -6, 28, -22, -7, -8, -15, 32, -4, -33, -35, -69, -7, 8, -1, -21, -42, -1, 5, 8, -22, 3, -25, -28, -41, 0, 59, 25, 48, 50, 13, 25, 26, 7, 63, 10, -42, 26, 23, 27, 20, 54, 24, 32, 21, 21, 13, 27, 32, 6, 19, 31, 32, -27, 11, 2, 47, 50, 39, 2, 4, 0, 25, 24, 10, 21, -16, -8, 85, -1, -15, -2, 7, 53, -40, 23, 18, -4, 24, 39, 2, 20, 20, -8, 83, 40, 56, -24, -20, -79, 34, 30, -12, -27, -3, 18, 22, 12, -25, 15, -90, -15, -2, 33, 33, 107, -5, 5, 15, -10, -18, 0, 13, -1, -33, -1, 56, 0, 15, 20, 2, 21, 4, 8, -3, -6, 11, 1, 16, -11, -35, -1, 9, 9, 38, 41, 4, 11, -13, -12, -5, -17, -19, -7, 12, 11, 6, -1, -8, -2, -12, -5, 5, 10, -11, -6, -16, 27, 5, 5, -16, 14, -2, -35, 5, -18, -16, -1, -36, -20, -31, -21, 15, -19, 6, -31, -43, -22, -21, 3, 3, -7, -14, -13, -35, -19, 10, 21, 23, 51, 5, 48, 16, 23, 7, -6, -22, 25, 25, 23, 11, 31, 38, 38, 10, 7, 12, 15, 43, 4, 49, 31, 37, -8, -14, -3, 21, 56, 54, -30, -5, -31, -10, -27, 4, 0, -48, 4, 27, -23, -41, 31, 2, 73, -21, -6, 34, -5, 14, 36, -14, -2, 23, -6, 58, 28, 19, -27, 5, -71, 22, 24, 9, -54, -28, -24, 15, -10, -35, -40, -71, -22, -15, 42, 45, 58, -4, -9, -14, -22, 18, 20, -8, -2, -8, -20, 71, 13, 3, -23, 9, 45, 22, 18, 4, -11, 5, 1, 0, -27, -12, -35, 22, -10, 25, 32, -5, 38, 6, 0, -29, -29, -10, -13, -1, 2, -22, -7, -12, -34, -22, 6, 8, 12, -11, 17, 6, -26, 10, 22, 3, 7, -3, -22, -54, -2, 31, 19, -13, -32, -1, -34, -13, -8, -34, -39, -16, -9, -21, 6, -36, 5, -58, -35, -23, 5, -25, 25, 36, 39, 7, 16, 2, 10, 32, 6, -70, 7, 17, 11, 6, 5, 49, 15, -11, 31, 16, 21, 25, 3, 44, 19, 28, -10, 3, 25, 24, 51, -12, 4, -16, -7, -24, 0, 9, -17, -21, 28, 60, -11, -37, -9, -15, 49, -7, -2, -12, -14, -1, 24, -1, 0, -13, -7, 32, 27, 35, -21, 5, -29, 45, 22, -18, -41, -3, 1, 10, 13, 0, -10, -67, -57, -30, 47, 24, 40, -30, 8, -5, -23, -18, -21, 7, -11, -32, -1, 21, -19, -7, -8, -12, 0, -33, -14, -18, 8, -28, 3, -2, -23, -21, -31, -1, 1, 6, 32, -8, 53, -32, -11, 3, -10, -38, -15, -29, 3, -10, 9, 20, -28, -14, -18, -16, 20, -3, -14, 16, -10, -12, 23, -20, 33, -4, -9, -9, 1, 35, 26, 11, -41, -42, -69, -17, -2, 1, -13, -20, -10, -13, -11, -33, -2, -10, -40, 4, 11, 22, 13, 12, 27, 1, 20, 2, 15, 35, 1, -6, 12, 14, 23, 3, 26, 61, 17, 17, 64, 6, 41, 10, 30, 80, 31, -23, 13, 48, 27, 1, 44, 8, -25, 10, -30, 2, 15, -1, 4, -31, 16, 86, -14, -1, -2, -6, 60, -17, 24, 20, 0, 15, 36, -3, -3, 12, -2, 67, 8, -1, -22, -4, -42, 45, 30, -15, -16, 11, -16, 3, -2, -24, 4, -37, 6, 4, 22, 30, 18, -1, -7, 6, -15, -24, -37, 13, 3, -39, -6, 31, -17, -16, 2, 2, -27, -15, -2, 11, 35, -7, 17, 4, -8, -1, -23, 0, 2, 5, -4, -10, -7, -12, -19, 6, 10, -14, 0, 16, 7, -4, -3, -10, -5, 9, -27, -2, -4, 3, 17, -1, 10, 12, -1, 23, 16, 25, -15, -1, 9, -10, 3, -8, -8, 4, -10, -16, 24, -8, -16, -33, 7, 9, -1, -8, -10, -32, -40, -15, 22, -12, 4, 25, 44, 7, 40, 9, 2, 34, 27, -29, 37, 23, 21, 39, 29, 84, 65, 14, 57, 5, 32, 25, 35, 55, 48, -37, 35, 23, 53, 39, 36, 38, 21, 7, 30, -12, -19, 10, -4, 5, 10, 95, -20, -19, -47, -15, -10, -9, -13, 6, 1, 38, 22, -4, -13, 5, 3, 55, 13, 47, -25, -23, -35, 35, -6, -9, -33, 23, -31, 14, 17, 8, 7, -43, -4, -25, 16, 14, 33, 3, -2, -4, -7, -6, -10, 9, 9, 35, 19, 11, 6, -25, 5, 0, 17, -12, 8, 0, 38, 2, 6, -15, 0, 16, -7, -21, -3, 15, 26, -6, -5, -7, 4, 15, -12, 15, 1, 5, 11, -2, 27, -4, -25, -4, -36, -1, 4, -9, -6, 2, 17, 12, 20, 5, 16, 0, -3, 26, -7, 15, 27, 12, -59, -34, 1, 19, 36, 20, -1, -1, 18, 11, 24, -12, 17, 9, -7, -49, 2, -22, 30, 42, 64, 44, 39, 13, 32, 48, 32, -17, 65, 42, 7, 2, -18, 65, 50, 1, 38, 44, 3, 66, 23, 84, 39, 41, 33, 8, 60, 36, 38, 23, -9, 15, 8, -2, 28, 13, -2, 25, 0, 55, 22, 18, -1, 10, 30, -24, -11, 8, -7, 12, 8, -10, 7, -8, -4, 55, 21, 17, -47, -11, -56, 12, 10, -19, -16, 12, 3, -12, -13, -20, 5, -38, -13, -16, 5, 1, -18, -25, 17, -11, -24, 19, 5, 4, -6, -25, -26, -19, 12, -21, -11, 7, -67, -16, 0, -9, 22, 13, -9, -10, -2, -8, -10, -43, 16, 8, 27, -21, 3, 7, -2, 1, -28, -17, -13, 5, 8, 4, 4, -30, -8, -12, -23, 7, 46, 24, -3, 11, 6, 13, -21, -6, 4, -12, -13, 55, 14, -11, 20, 10, -30, 12, -27, 6, 20, 0, -29, -3, -4, 24, -8, 27, -1, -7, -7, -11, -30, -9, 11, 47, 25, 19, -19, -13, 13, 79, 21, -13, 8, 13, 5, 2, -12, 20, 9, -15, 23, -5, 7, 28, 11, 53, 25, -19, 20, -1, 6, 29, 47, 13, -25, 16, 25, -37, -4, 14, -3, 12, 21, 23, 5, -9, -35, -12, 22, -18, 1, -2, -1, -9, 2, -9, -6, 3, 0, 55, 5, 20, -34, -18, -33, 20, -8, 11, -31, -1, 0, -12, -8, -39, 15, 14, -24, -29, 23, -4, 50, -5, 16, -12, -2, 27, -20, 2, 5, -6, 1, -5, -8, -15, -31, -4, -36, 17, -8, 8, -31, -3, -8, -14, -3, -43, -5, -35, 16, -15, -5, -10, 38, 2, -20, -7, -4, 24, 7, -14, 5, -39, -28, -23, -3, -29, -7, -3, 33, 12, 3, 3, 17, -2, -22, 6, 14, -30, 1, 29, 7, 5, 25, -4, -70, -38, -21, -12, 29, -8, -7, -12, -18, 30, 6, -45, -24, -27, -38, -46, -6, -59, -30, 29, 46, 10, -7, 12, 3, 47, 2, -37, 10, 17, -30, 0, -13, 38, 17, 10, 22, 18, 39, 34, 25, 60, 35, -3, -2, -1, 34, 26, 18, 9, -22, -8, 52, -9, 0, -4, -12, 21, -12, 15, 14, 23, -7, -12, 11, 7, -16, -6, 18, 15, 29, -5, 15, -19, -11, 49, -4, 25, -1, 3, -39, 10, 0, -12, -30, 9, -21, 11, -5, -26, -2, -27, -45, -23, 6, -2, 19, -14, -31, -4, -22, -12, -8, -16, -8, -15, -38, 21, -19, -15, -15, -5, -46, 3, -8, -11, -28, -10, -20, 2, -14, 1, 0, -27, 2, -3, -13, 7, 23, 1, -20, 1, -28, 24, -9, -6, -32, -40, 7, -6, 6, -29, 25, -3, 28, 12, 22, -10, 13, 6, -34, 12, -19, 15, -4, 36, -28, 5, -6, 7, -30, -35, -1, 3, 6, -6, -11, -23, -6, 14, -10, -21, -20, -30, -26, -28, -12, -38, -39, 26, 58, 23, 20, 8, 4, 33, 3, -67, 13, 19, -27, -35, 19, 62, 45, 7, -2, 5, -4, 51, 44, 71, 49, 86, -21, -3, 17, 13, 34, -5, -24, 7, 11, -19, 11, -7, -13, 27, 36, 62, 25, 1, -41, -8, 16, 22, -6, 11, 9, 26, 41, -10, 0, -4, 9, 34, 28, 4, 6, 7, -25, -5, -17, -23, -32, -2, -15, -11, 13, -26, -17, -21, -27, -16, 20, -15, 39, -16, -5, -23, -32, 20, -14, -13, -10, -28, -33, 60, -12, -30, 2, 12, 15, -18, -21, -10, 0, -1, -22, -21, -5, -22, -24, -46, -4, -14, -23, -19, 51, -38, -22, 5, -1, 0, 35, -23, -7, -30, -38, 7, 6, 15, 6, -7, -3, 10, 21, 2, 16, 2, 32, -17, -3, 13, -12, -55, 13, 6, 40, 5, -15, -26, -31, -1, 25, -15, -9, -50, 14, -8, 3, 6, 13, -16, -23, -14, 13, -28, -6, 21, 43, 23, 13, -3, 0, 21, 15, -1, 7, 28, -17, 3, 13, 26, 47, 12, 50, 3, 4, 14, 21, 61, 27, 72, 4, -15, 29, 30, 33, -23, 4, -11, -15, -4, -10, -22, -10, 16, 13, 77, -30, 5, -43, -6, 39, -5, -9, 4, -2, 15, 19, -5, 13, 0, -9, 37, 30, 41, -4, -18, 8, -9, 3, -22, -34, -24, -29, 3, -6, -22, -5, -5, -44, -16, 26, 15, 43, 2, 3, 16, -27, -8, -25, -1, -6, 2, -14, 16, 0, -31, -17, 7, -3, 7, 4, 2, -2, -5, -2, -8, -23, -29, -28, -5, 17, -1, -32, -24, 52, -11, 29, 10, -53, -20, 41, 4, 9, -33, -3, 14, 9, 17, 3, -23, 23, 33, 7, -5, -12, 27, -1, 21, 20, -4, -13, 10, 23, -23, 38, 26, 0, -2, -31, -3, -13, -36, -46, -44, -3, 4, -21, -34, -50, -62, -34, -40, 21, -16, -1, 41, 20, 12, 13, -2, 2, 39, -8, -29, 8, 22, 1, -24, -9, 43, 38, 7, 29, 8, 16, 10, 15, 57, 19, 16, -11, -7, 29, 39, 14, 7, -21, -32, -3, -7, 1, -9, -5, -15, 4, 55, -8, -28, -19, -34, 58, -15, -13, 0, -8, 23, 23, -5, -14, -16, -6, 30, 20, 9, 5, -24, -37, 17, 7, -19, -53, 15, 19, -16, -9, -27, 2, -32, -38, -5, 3, 4, 61, 0, 13, -2, -13, -16, -30, 5, -14, -21, 8, 9, -11, -11, 8, 15, 19, -1, -49, -18, -32, -10, -9, -38, -31, -35, -23, 29, 10, 5, -13, -34, 38, -11, -27, -22, -29, -16, 9, -8, -14, -29, 8, 12, -12, -43, -30, -11, -35, -21, 22, -10, -10, 2, -32, 3, -28, -4, -21, 6, -17, -23, -5, -7, -5, -29, -37, -34, -14, -18, -44, -17, -27, 3, -8, -18, -3, -21, -44, -49, -3, -60, -7, 24, 36, 18, 22, -4, 7, 55, -14, -49, 5, 25, -23, -23, -9, 30, 39, 10, 21, 2, 12, 27, 23, 64, 32, 11, -15, 18, 48, 34, -4, 34, -8, -5, 11, -14, -25, 0, -12, 8, 45, 94, -28, -46, -7, 15, 61, -38, -57, 7, 18, -12, -12, -21, -25, 0, -5, 65, 4, 6, -40, -10, -47, 11, -18, 13, -9, -18, -11, -1, -2, -28, -15, -54, -21, 3, 20, -6, 28, 5, 2, -3, -30, -43, -38, 6, 1, -15, -10, 30, -43, -34, -13, -12, -17, -31, -42, -9, -18, -15, 13, -8, -29, -26, -9, -37, 18, -3, -18, -23, -4, -14, -1, -18, -48, -6, -26, -10, -22, -37, 6, 16, -31, -12, -7, 1, -16, -6, -16, 8, -14, 6, 1, -7, 6, -42, -24, -50, -4, -12, 15, -23, -19, -31, -47, -10, 15, -23, -40, -15, -20, -5, 10, -28, -17, -33, -22, -22, 5, -26, -16, 24, 10, 8, 52, 7, 1, 55, -1, -25, 22, 33, -15, -16, 20, 50, 60, 16, 38, 14, -2, 7, -4, 86, 37, 44, 23, -20, -2, 35, 24, 27, 1, 3, 22, -3, -28, 6, 22, -26, 29, 57, -4, -33, 0, 0, 61, -29, -26, 14, 14, -2, 16, -17, -2, -32, -6, 43, 23, 49, -13, -16, -73, -6, 18, -9, -33, -13, 8, -29, -18, -23, 9, -67, -28, -11, 28, -9, 20, 6, 4, -24, -34, -8, -11, 18, -12, -41, 17, 57, -50, -35, -18, 11, -41, -39, -9, -4, -3, 5, 7, -18, -10, 13, -38, -38, 22, 8, -28, -13, 27, -13, 11, -5, -24, -1, -4, -3, 0, -15, 18, 12, -33, -8, -23, -2, -18, 4, 13, 0, 20, -16, -8, 3, -1, 1, -8, -13, -2, 1, 3, -4, -46, 26, -65, -36, -28, -38, -36, 2, -2, 11, 10, 2, -23, -31, -1, 3, 2, -59, -39, 3, 13, 7, 6, -32, 5, 33, -20, -37, 11, 17, -44, -3, -22, 8, 35, 11, 49, 2, -1, 23, 24, 78, 32, 3, 16, 3, 6, 29, 34, 17, -3, -18, 40, -4, -7, -12, -13, 32, 13, 12, 27, 23, 6, -20, 76, -13, -22, 4, 22, 8, 10, -22, -1, 3, -3, 60, 5, 6, -7, -5, -85, 8, -10, 2, -30, -8, -9, -2, -12, -15, -4, -74, -22, -25, 31, -6, 49, 15, 4, -8, -25, -10, -37, 1, -2, 4, 15, 67, -7, 0, -38, 22, -19, -29, -15, 24, 29, 20, 14, 3, -8, -38, -21, -35, 22, 42, 12, -1, 7, -11, 5, 1, -26, -11, -1, -13, -9, -20, 23, 12, -18, -53, -44, -9, -19, -9, 2, 1, 7, 33, 21, -8, 2, 8, 4, -34, 15, 9, 7, 15, -42, -13, -8, -11, 15, -22, -34, -18, -16, 0, -7, -37, -34, -36, -45, -10, 0, 9, -33, -2, 7, -8, 13, 7, 3, 55, -5, -22, 15, 34, -33, -12, -4, 30, 24, 6, 49, 29, 23, 12, 32, 91, 44, 12, 5, -1, 20, 11, -28, -16, 6, -19, 15, -5, -7, -15, -7, 19, 11, 26, 5, -5, 2, -11, 45, -31, -24, 3, -30, -19, 18, -15, -6, 11, -4, -2, 25, 8, -30, -23, -75, -1, -18, -10, -19, 27, -10, 17, -7, -42, 20, -59, -13, -6, 19, 3, 68, 4, -4, -19, 1, -5, -22, -2, -3, -2, -4, 123, -46, -32, -29, -30, 16, 3, -11, 7, -3, 6, 3, -15, -35, -25, -33, -14, 19, 2, 21, -10, 40, -9, -21, -10, -40, 8, -17, -12, -1, -19, 14, 19, 2, -18, -9, -1, -50, -23, -2, 13, -1, 3, 14, -15, 4, 10, -8, -37, -16, 4, 0, 3, -41, -42, -32, -24, 1, -5, -28, -21, -23, 22, 2, 17, -43, -50, -18, -59, 11, -52, -18, 21, 61, 19, 31, 5, 5, 55, 4, -2, 20, 9, 5, -28, -21, 23, 51, 21, 65, 26, 32, 18, 19, 97, 14, -18, 12, 4, 34, 40, -46, -16, 28, -10, -8, 1, -14, -1, -6, 61, 32, 18, -16, -11, -26, 21, -11, -25, -25, 3, 24, 23, 2, 8, -1, 3, 1, 5, 15, 19, -37, -34, -86, 13, 2, 4, -37, -1, -25, 7, -3, -32, 10, -52, -6, -21, 55, 14, 37, -21, 13, -17, -13, -2, -11, -11, 10, -13, -15, 94, -18, -30, 4, -1, -33, -12, -45, 20, 16, -10, 10, -20, -29, -18, -16, -6, 14, 0, -5, -30, -3, -30, -32, 6, -30, 3, -25, -20, -4, -3, 11, 0, -31, -12, -43, -28, 7, 0, -2, 7, 23, -8, 24, -5, -3, 9, -21, -24, 10, 45, 4, 14, -10, -7, -25, 6, 3, -39, 7, -9, 1, -10, 11, 33, -40, -28, -12, -35, 5, -27, 14, 45, 38, 41, 25, -10, -1, 25, 14, -56, 12, 25, -13, 7, -24, 47, 40, 14, 67, 23, 6, 26, -1, 72, 27, -1, -2, 21, 19, 30, -17, 21, 10, -16, -6, 4, 6, 5, -8, 18, 23, 35, -3, 6, -5, 11, 27, -17, -16, 16, 5, 3, 15, 2, 21, -12, 11, 15, 15, 25, -67, -39, -54, 0, 1, -11, -9, -10, 13, 8, 3, 3, 20, -69, -2, -8, 33, 10, 55, 10, -1, -7, -31, -9, -21, 2, 5, 1, -4, 86, -25, -8, -1, 0, -1, 1, -38, 6, -14, -8, -30, -19, -16, -25, -14, 1, -24, 2, -39, -12, -14, -31, -16, -14, -18, 0, -9, -10, -9, -1, -1, -16, -11, -20, -17, -12, -6, 10, 24, 14, 2, -3, 20, 25, -5, 18, -26, 0, 20, 28, 9, 8, -16, 32, -19, -27, -26, -20, -41, -15, 10, 2, 11, -24, -35, -40, -20, -16, 5, -53, -9, 16, 29, -6, 24, -8, -8, 26, -10, -49, 32, 2, -11, 3, -13, 48, 34, 9, 0, 30, 1, 42, 9, 37, 38, 35, 22, 11, 48, 38, 1, 55, 8, 13, 29, -19, 9, 9, 17, 23, 34, 37, 41, 13, -4, 25, -24, -48, -11, 7, 0, 8, 1, 5, 11, 28, 17, 58, 20, -4, -37, -21, -48, 20, 6, -13, 0, 18, 11, -3, -1, -33, -26, -35, -11, -19, 28, 15, 56, 0, 17, -16, -39, -17, -22, -13, 1, -33, 0, 90, -25, -19, -21, 1, 27, -22, -20, -16, -2, 6, 4, -28, 13, -15, -45, 22, 17, -14, 7, -39, 10, -27, -21, -3, -38, -15, -25, -18, -9, -16, -6, -63, -4, -25, -42, -17, 2, -10, 14, 1, 21, 8, 21, -8, 1, -12, -3, 11, -6, 9, -5, -7, -42, -15, -33, -22, 36, -51, -54, -22, -22, 37, -5, -9, -37, -31, -24, -41, 26, -56, -46, 19, 17, -6, 51, 3, -8, 4, -8, -79, -8, 26, -25, -2, -1, 14, 27, 0, 40, 31, 46, 34, 28, 69, -1, 12, 16, 49, 18, 26, -12, 33, 21, 22, 17, -12, 9, 10, -2, 44, 45, 19, -3, 10, 26, 11, 24, -3, -6, -16, -16, -10, -16, -12, -25, 13, -1, 89, -6, 12, -20, -4, -53, 28, 0, 1, -25, -1, 7, -8, 11, 17, 2, -57, -29, 26, 31, 13, 37, 5, 8, -9, -18, 1, -21, 13, -5, -4, -14, 79, 7, -36, -12, 5, 23, -39, -50, 2, -10, -27, -9, -23, -23, -31, -38, -17, 2, -2, -43, -31, -12, -20, -14, -14, -51, -1, 31, -10, 8, -15, 10, -23, -29, -18, -9, -16, 13, -11, -14, 0, 11, 0, -10, -4, -19, -8, -26, 30, 2, 23, 13, -14, -17, 2, -31, 1, 8, -31, -14, -2, -16, 13, 22, -4, -26, -13, -21, -20, 15, -30, -14, 11, 27, 3, 30, 0, -12, 6, -4, -42, 15, 11, -8, -23, 47, 46, 25, 46, 54, 29, 34, 24, 17, 56, 30, 46, 9, 2, 42, 32, 64, 43, 23, 13, 37, 5, 25, 13, -8, 37, 27, 16, 18, 33, -5, 13, 57, 14, -2, -1, -17, -2, 12, -1, -3, -6, 38, 45, 2, 24, -11, 4, -62, 7, -7, -19, -26, -17, 6, 2, -14, -11, 11, -9, -28, -6, 29, 7, 81, -16, -5, -17, -13, -15, -23, -6, -24, -27, -1, 100, -9, -19, -32, -2, -53, -15, -15, -12, 11, -11, -12, -13, -3, -37, -24, -24, 17, 12, -9, -10, 33, -28, -13, 2, -37, 19, 2, 2, -15, -52, -20, 18, -18, -1, -16, -16, 25, 10, -7, 17, 5, 5, 9, 15, -2, -13, -12, -15, 12, 26, 26, 8, -21, 39, -21, -30, -7, -30, -16, -17, -16, 4, 4, -21, -24, -16, -18, -7, -19, -2, -21, 15, 29, 1, -5, -19, -7, 16, -14, -71, -1, 1, -9, 3, 19, -14, 17, 5, 69, -3, 15, 11, 14, 19, 14, 35, -5, -4, 17, -1, 21, -3, 17, 23, 28, -10, 12, -16, 3, 12, 7, 2, 11, 30, -11, 3, -12, 19, 0, -4, 23, 18, -16, -5, -7, 15, 1, 51, 3, 5, 9, 10, 8, -15, 0, 0, -74, -4, -4, -21, 4, -21, 13, 14, -8, -18, 40, 20, 49, -11, 0, -4, -13, -32, -28, 1, -11, -6, 1, 108, -18, -23, 4, -7, -18, 4, -23, 0, -11, -37, -43, -26, 6, -10, -17, 20, 10, -7, -20, -21, 21, -33, 2, -17, -54, -1, -20, -15, -20, -33, -7, -14, -19, -11, -51, -24, -9, 26, 14, -3, 3, -17, -12, 20, 4, -3, -17, 14, 2, 25, 28, 17, 

};
const TfArray<2, int> tensor_dimension4 = { 2, { 2,4000 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0047045811079442501, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data5[16] = { -600, -1890, 122, -3571, -15180, -1954, -28, -487, -649, -14659, -10606, -20, -3114, 1007, -305, 153, };
const TfArray<1, int> tensor_dimension5 = { 1, { 16 } };
const TfArray<16, float> quant5_scale = { 16, { 2.1957999706501141e-05, 2.0290539396228269e-05, 1.4187396118359175e-05, 1.1946081940550357e-05, 1.4174815987644251e-05, 1.2147900633863173e-05, 1.8238808479509316e-05, 1.3332918570085894e-05, 8.9266741269966587e-06, 1.4707280570291914e-05, 1.2459171557566151e-05, 2.2811280359746888e-05, 1.5923325918265618e-05, 1.7054580894182436e-05, 1.7234433471458033e-05, 1.2710246664937586e-05, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data6[16*3*3*8] = { 
  /* [0][0][][] */ 108,-49,88,27,6,-15,107,-17, -53,35,-69,1,-59,6,-49,-68, -30,68,12,9,-22,-10,37,-19, 
  /* [0][1][][] */ 40,-47,90,15,31,-27,88,-68, -69,56,-63,7,-66,-14,-50,-48, -61,127,35,26,18,18,44,-33, 
  /* [0][2][][] */ 20,-30,11,-5,-8,-4,105,-43, -53,57,-76,-12,-91,-5,-70,-49, -18,78,26,14,-11,-9,71,4, 
  /* [1][0][][] */ -37,99,-48,33,2,-25,-49,17, 42,-99,55,6,61,32,127,28, 95,-77,24,-37,1,-32,96,-37, 
  /* [1][1][][] */ -20,25,-18,-3,-38,-40,-7,-44, 61,-21,90,9,29,8,112,-38, 66,-70,22,-36,-13,16,32,-37, 
  /* [1][2][][] */ -22,37,-12,-9,21,30,-19,-22, 17,-47,47,-2,20,6,82,-59, 45,-72,-1,-3,-8,-6,38,-86, 
  /* [2][0][][] */ -44,72,-119,10,2,1,-102,25, 60,-95,112,38,47,-39,75,20, 17,-38,31,-27,-9,-8,68,-18, 
  /* [2][1][][] */ -19,75,-127,9,-26,1,-33,52, 7,-51,61,-20,68,16,13,-54, 33,-84,67,6,41,-15,41,-34, 
  /* [2][2][][] */ -5,78,-96,14,-93,61,-104,-21, -12,-70,85,43,47,18,113,50, 65,-94,52,-11,-16,-49,31,-17, 
  /* [3][0][][] */ 25,-9,-91,-23,-9,-6,-79,8, 33,-3,-78,49,-15,-21,-46,35, -41,47,-31,-14,23,-7,23,24, 
  /* [3][1][][] */ 7,-2,-25,-3,-39,-39,-124,-64, -15,47,-127,-26,-57,20,-39,20, -20,78,19,47,-55,-13,43,77, 
  /* [3][2][][] */ 4,4,-49,-48,9,-16,-43,-62, -42,31,-89,-15,-42,-23,-33,56, -24,4,5,-34,15,-2,55,22, 
  /* [4][0][][] */ -55,-1,-105,-32,-37,-27,-127,22, -28,-65,-47,-28,3,50,-69,26, 47,42,80,-47,-5,51,-71,43, 
  /* [4][1][][] */ -56,11,-48,9,7,41,-80,1, -15,9,-41,-11,-35,68,-113,34, 7,31,67,-7,72,11,16,38, 
  /* [4][2][][] */ -43,7,-65,20,-12,-21,-68,-22, 29,-5,-59,0,-2,27,-23,53, 26,56,-26,-29,55,-7,-101,84, 
  /* [5][0][][] */ -43,47,-71,11,-29,-60,-54,41, -70,42,-41,-21,51,25,-69,-19, 2,93,85,28,23,15,2,64, 
  /* [5][1][][] */ -75,33,-73,-32,7,8,-36,-47, -50,25,5,16,34,33,113,57, 72,9,25,42,-114,59,47,8, 
  /* [5][2][][] */ -8,10,-127,14,-27,38,-65,-44, -38,-10,-109,22,-1,-53,-58,-36, 49,-5,-3,34,-18,16,-19,-62, 
  /* [6][0][][] */ -16,32,-81,13,-53,-7,-58,-5, -5,17,-32,-19,5,-8,-3,17, 26,-1,-5,29,-4,11,-45,-9, 
  /* [6][1][][] */ -51,9,-56,-28,-62,11,-64,-49, 15,60,-91,-27,-7,52,13,23, 17,35,60,-25,51,42,127,59, 
  /* [6][2][][] */ -6,15,-74,-28,-57,-3,-62,-61, 24,28,-63,-24,4,15,12,43, -9,21,22,30,-21,-38,11,10, 
  /* [7][0][][] */ -58,52,-24,-37,-41,37,-44,23, 66,10,60,51,66,26,27,22, 30,-30,-26,-37,35,-11,127,-55, 
  /* [7][1][][] */ -45,54,-51,-32,10,25,-1,35, 19,-2,77,46,-23,48,108,0, 11,-9,22,13,-22,-19,5,18, 
  /* [7][2][][] */ -41,-54,-45,10,6,-18,-100,54, 15,-37,89,22,60,22,14,-17, 3,-35,-5,8,-3,20,110,4, 
  /* [8][0][][] */ -15,-39,-53,46,-35,-64,-74,46, -58,-55,-4,21,103,-11,-40,57, 40,-94,49,30,51,31,-68,-12, 
  /* [8][1][][] */ -50,-88,-50,-13,-28,-90,-52,-18, 21,41,54,-1,33,19,-39,52, -57,-119,-26,11,8,23,66,75, 
  /* [8][2][][] */ -28,-28,-31,-82,-10,19,-51,-21, 110,-94,127,-49,32,-65,-14,12, 108,-30,-36,23,16,-50,19,-70, 
  /* [9][0][][] */ -26,-6,-63,24,-19,33,-98,47, 5,-49,28,-34,37,34,-127,60, -2,-71,15,38,11,11,-75,46, 
  /* [9][1][][] */ -54,56,-35,-47,-35,29,-122,50, -16,-85,52,-42,35,10,-99,-4, 5,-4,58,-24,-6,10,-37,2, 
  /* [9][2][][] */ -27,78,-74,-12,-3,0,-109,30, 4,-27,20,-5,-7,41,-77,60, 9,-52,16,-28,54,23,-79,30, 
  /* [10][0][][] */ 50,-15,-20,11,38,11,-21,21, 11,-127,15,-23,-14,-40,-73,-25, -30,-44,-9,11,-9,27,-38,24, 
  /* [10][1][][] */ 58,37,34,36,28,30,-25,58, 119,-113,56,-27,-2,-33,-3,76, 37,-11,-15,-2,31,-2,-42,-18, 
  /* [10][2][][] */ 88,-47,28,27,20,-3,-11,39, -27,-42,82,-32,66,36,-96,-14, -9,-54,-34,-14,-10,-31,14,-52, 
  /* [11][0][][] */ 71,-20,68,53,39,-30,96,-43, -32,8,-45,16,-14,-30,-55,-22, -23,26,-21,6,-40,-39,0,-51, 
  /* [11][1][][] */ 127,-32,86,-15,48,-18,72,-56, -36,28,-59,7,-43,0,-67,-58, -43,47,-18,-30,-36,-40,-17,-36, 
  /* [11][2][][] */ 83,-28,113,34,42,5,117,-47, -34,20,-53,6,-59,-10,-71,-67, -57,17,-18,-7,-60,-12,-6,-22, 
  /* [12][0][][] */ -44,2,-63,25,-29,-13,-39,3, 5,11,-118,-29,-15,37,-127,-1, 25,81,60,22,72,1,-19,43, 
  /* [12][1][][] */ -57,-39,-65,-8,-12,-2,-49,0, 10,40,-105,-35,-26,-7,-39,3, 13,50,78,6,-10,-10,17,61, 
  /* [12][2][][] */ -48,-38,-89,-51,-56,-10,-75,-8, -32,-6,-124,5,-38,-18,-42,7, 52,-12,77,3,67,-49,-33,-11, 
  /* [13][0][][] */ -41,4,-76,-29,-60,26,-116,-29, 35,62,-100,15,-46,-20,-127,-13, -19,58,47,14,40,-10,-62,60, 
  /* [13][1][][] */ -58,18,-94,-20,-7,-19,-88,-2, -13,51,-111,-34,-39,58,-21,66, 13,-41,56,-9,56,16,72,17, 
  /* [13][2][][] */ -59,43,-107,19,-23,-5,-118,-47, 43,64,-53,13,4,17,-32,-3, 30,54,44,-12,15,16,48,17, 
  /* [14][0][][] */ -50,83,-51,9,-57,-4,-60,-40, 33,13,85,27,-1,-7,104,-67, 53,-46,14,35,16,-43,47,-74, 
  /* [14][1][][] */ -21,61,-58,-3,-59,14,-59,-54, 61,-44,71,24,52,-9,127,1, 37,-14,24,-18,-4,-1,7,-18, 
  /* [14][2][][] */ -46,81,-34,-15,-39,12,-54,-65, -1,-105,26,-21,49,-29,73,1, 32,-8,34,-24,-19,0,54,15, 
  /* [15][0][][] */ -42,88,-85,-5,-30,-28,-102,-13, 70,-53,94,4,31,-35,86,-38, 25,-106,59,-29,-30,-5,127,-20, 
  /* [15][1][][] */ -12,21,-78,-26,-32,62,-48,25, 52,-71,117,1,-11,49,111,17, 83,-60,90,-36,30,5,68,-84, 
  /* [15][2][][] */ -47,18,-116,-25,-72,-57,-18,-12, 38,-31,115,46,12,-24,45,-30, 88,-5,58,-35,-63,-2,44,18, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 16,3,3,8 } };
const TfArray<16, float> quant6_scale = { 16, { 0.005750258918851614, 0.0053135920315980911, 0.0037153293378651142, 0.0031283844728022814, 0.003712034784257412, 0.0031812356319278479, 0.0047762943431735039, 0.0034915627911686897, 0.0023376760073006153, 0.0038514742627739906, 0.0032627498731017113, 0.0059737120755016804, 0.0041699265129864216, 0.0044661741703748703, 0.0045132734812796116, 0.0033285003155469894, } };
const TfArray<16, int> quant6_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data7[8] = { 814, 81, 44, -2421, 321, -21199, 516, -15993, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 9.437138942303136e-06, 1.3545996807806659e-05, 1.117686497309478e-05, 8.4443418018054217e-06, 1.2169487490609754e-05, 5.0198141252622008e-06, 1.359204816253623e-05, 8.1310654422850348e-06, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data8[8*3*3*1] = { 
  /* [0][0][][] */ 47, 24, -40, 
  /* [0][1][][] */ 69, -127, -68, 
  /* [0][2][][] */ 119, -79, -116, 
  /* [1][0][][] */ -127, -78, 46, 
  /* [1][1][][] */ 6, -67, 115, 
  /* [1][2][][] */ -91, 60, 49, 
  /* [2][0][][] */ 127, 72, -125, 
  /* [2][1][][] */ 34, -68, -101, 
  /* [2][2][][] */ 99, 33, -96, 
  /* [3][0][][] */ -117, -40, -61, 
  /* [3][1][][] */ -127, 85, -108, 
  /* [3][2][][] */ 92, 2, 42, 
  /* [4][0][][] */ 114, -36, -32, 
  /* [4][1][][] */ 127, -44, -26, 
  /* [4][2][][] */ 26, 54, -53, 
  /* [5][0][][] */ -33, 56, 15, 
  /* [5][1][][] */ 69, 95, 33, 
  /* [5][2][][] */ -127, -18, -52, 
  /* [6][0][][] */ 127, 80, -85, 
  /* [6][1][][] */ 85, -24, -96, 
  /* [6][2][][] */ -33, -80, -125, 
  /* [7][0][][] */ 114, 45, 97, 
  /* [7][1][][] */ 66, 127, 65, 
  /* [7][2][][] */ -50, 116, 1, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant8_scale = { 8, { 0.0028521129861474037, 0.0040939012542366982, 0.0033778969664126635, 0.0025520676281303167, 0.003677889471873641, 0.0015170993283390999, 0.0041078189387917519, 0.0024573886767029762, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<4, int> tensor_dimension9 = { 4, { 1,99,40,1 } };
const TfArray<1, float> quant9_scale = { 1, { 0.0033088235650211573, } };
const TfArray<1, int> quant9_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<4, int> tensor_dimension10 = { 4, { 1,99,40,8 } };
const TfArray<1, float> quant10_scale = { 1, { 0.0038186106830835342, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,50,20,8 } };
const TfArray<1, float> quant11_scale = { 1, { 0.0038186106830835342, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,50,20,16 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0060524540022015572, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,25,10,16 } };
const TfArray<1, float> quant13_scale = { 1, { 0.0060524540022015572, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<2, int> tensor_dimension14 = { 2, { 1,4000 } };
const TfArray<1, float> quant14_scale = { 1, { 0.0060524540022015572, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<2, int> tensor_dimension15 = { 2, { 1,2 } };
const TfArray<1, float> quant15_scale = { 1, { 0.12302539497613907, } };
const TfArray<1, int> quant15_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<2, int> tensor_dimension16 = { 2, { 1,2 } };
const TfArray<1, float> quant16_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 9 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 9,8,7 } };
const TfArray<1, int> outputs1 = { 1, { 10 } };
const TfLitePoolParams opdata2 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs2 = { 1, { 10 } };
const TfArray<1, int> outputs2 = { 1, { 11 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 11,6,5 } };
const TfArray<1, int> outputs3 = { 1, { 12 } };
const TfLitePoolParams opdata4 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs4 = { 1, { 12 } };
const TfArray<1, int> outputs4 = { 1, { 13 } };
const TfLiteReshapeParams opdata5 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs5 = { 2, { 13,2 } };
const TfArray<1, int> outputs5 = { 1, { 14 } };
const TfLiteFullyConnectedParams opdata6 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs6 = { 3, { 14,4,3 } };
const TfArray<1, int> outputs6 = { 1, { 15 } };
const TfLiteSoftmaxParams opdata7 = { 1 };
const TfArray<1, int> inputs7 = { 1, { 15 } };
const TfArray<1, int> outputs7 = { 1, { 16 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 8000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 31680), (TfLiteIntArray*)&g0::tensor_dimension9, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension10, 31680, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 31680), (TfLiteIntArray*)&g0::tensor_dimension11, 8000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension12, 16000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16000), (TfLiteIntArray*)&g0::tensor_dimension13, 4000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension14, 4000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4000), (TfLiteIntArray*)&g0::tensor_dimension15, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension16, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[8] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[8] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_CONV_2D, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 17, };
const size_t tflNodes_subgraph_index[] = {0, 8, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  16, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 17;
  for (size_t i = 0; i < 17; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 8; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
